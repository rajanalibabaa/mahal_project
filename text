{/* Add Event Modal */}
      <Dialog
        open={openModal}
        onClose={handleCloseModal}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Add New Event</DialogTitle>
        <DialogContent>
          <Box sx={{ display: "flex", flexDirection: "column", gap: 2, mt: 2 }}>
            {/* Start Date and Time */}
            <Box sx={{ display: "flex", gap: 2, flexDirection: { xs: "column", sm: "row" } }}>
              <TextField
                label="Event Start Date"
                type="date"
                value={newEventStartDate}
                onChange={(e) => setNewEventStartDate(e.target.value)}
                InputLabelProps={{
                  shrink: true,
                }}
                fullWidth
              />
              <TextField
                label="Start Time"
                type="time"
                value={newEventStartTime}
                onChange={(e) => setNewEventStartTime(e.target.value)}
                InputLabelProps={{
                  shrink: true,
                }}
                fullWidth
              />
            </Box>

            {/* End Date and Time */}
            <Box sx={{ display: "flex", gap: 2, flexDirection: { xs: "column", sm: "row" } }}>
              <TextField
                label="Event End Date"
                type="date"
                value={newEventEndDate}
                onChange={(e) => setNewEventEndDate(e.target.value)}
                InputLabelProps={{
                  shrink: true,
                }}
                fullWidth
              />
              <TextField
                label="End Time"
                type="time"
                value={newEventEndTime}
                onChange={(e) => setNewEventEndTime(e.target.value)}
                InputLabelProps={{
                  shrink: true,
                }}
                fullWidth
              />
            </Box>

            <TextField
              select
              label="Event Title"
              value={newEventTitle}
              onChange={(e) => setNewEventTitle(e.target.value)}
              fullWidth
            >
              <MenuItem value="Marriage">Marriage</MenuItem>
              <MenuItem value="Reception">Reception</MenuItem>
              <MenuItem value="Engagement">Engagement</MenuItem>
              <MenuItem value="WeddingAnniversary">WeddingAnniversary</MenuItem>
              <MenuItem value="Seemantham/Valaikappu">
                Seemantham/Valaikappu
              </MenuItem>
              <MenuItem value="Poonool/Upanayanam">Poonool/Upanayanam</MenuItem>
              <MenuItem value="Sangeet & Mehandi">Sangeet & Mehandi</MenuItem>
              <MenuItem value="BirthDay">BirthDay</MenuItem>
              <MenuItem value="Puberty">Puberty</MenuItem>
              <MenuItem value="Others">Others</MenuItem>
            </TextField>
            <TextField
              select
              label="Select Option"
              value={dropdownValue}
              onChange={(e) => setDropdownValue(e.target.value)}
              fullWidth
            >
              <MenuItem value="TTV">TTV</MenuItem>
              <MenuItem value="SMSH">SMSH</MenuItem>
            </TextField>
          </Box>

          {/* List of custom events for the selected month */}
          {customEvents.filter((event) => {
            const eventDate = new Date(event.date || event.Date || event.startDate || event.StartDate);
            return (
              eventDate.getFullYear() === selectedYear &&
              eventDate.getMonth() === months.indexOf(selectedMonth)
            );
          }).length > 0 && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="h6" gutterBottom>
                Your Events for {selectedMonth} {selectedYear}
              </Typography>
              <List>
                {customEvents
                  .filter((event) => {
                    const eventDate = new Date(event.date || event.Date || event.startDate || event.StartDate);
                    return (
                      eventDate.getFullYear() === selectedYear &&
                      eventDate.getMonth() === months.indexOf(selectedMonth)
                    );
                  })
                  .map((event) => (
                    <ListItem key={event.id}>
                      <ListItemText
                        primary={event.Title || event.title}
                        secondary={
                          <Box>
                            <Typography variant="body2">
                              Start: {formatDateTime(
                                event.startDate || event.date || event.Date, 
                                event.startTime
                              )}
                            </Typography>
                            {event.endDate && (
                              <Typography variant="body2">
                                End: {formatDateTime(event.endDate, event.endTime)}
                              </Typography>
                            )}
                            <Typography variant="body2">
                              Mahal: {event.mahal || event.Mahal}
                            </Typography>
                          </Box>
                        }
                      />
                      <ListItemSecondaryAction>
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => handleDeleteEvent(event.id)}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </ListItemSecondaryAction>
                    </ListItem>
                  ))}
              </List>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseModal}>Cancel</Button>
          <Button
            onClick={handleAddEvent}
            variant="contained"
            disabled={!newEventStartDate || !newEventTitle}
          >
            Add Event
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
     